---
const { title, description, github, website, tech, classList } = Astro.props;
---

<div
    class={`${classList} card md:w-80 w-full h-full bg-gray-800 border border-gray-650 rounded-md p-4`}
>
    <div
        class="z-10 pointer-events-auto w-full flex flex-col items-start h-full justify-between"
    >
        <div>
            <h3 class="font-bold text-2xl mb-4">{title}</h3>
            <p class="mb-4">{description}</p>
            {
                tech && (
                    <p class="text-gray-200">
                        Made with:
                        <span class="tracking-wide text-gray-100">{tech}</span>
                    </p>
                )
            }
        </div>
        <div class="w-full flex flex-col md:flex-row items-center mt-6 gap-2">
            {
                github && (
                    <a
                        href={github}
                        target="_blank"
                        rel="noopener noreferrer"
                        class="py-2 px-4 bg-gray-700 border border-accent-100 rounded-md hover:bg-gray-600 z-10 w-full text-center"
                    >
                        Code
                    </a>
                )
            }
            {
                website && (
                    <a
                        href={website}
                        target="_blank"
                        rel="noopener noreferrer"
                        class="py-2 px-4 bg-gray-700 border border-accent-100 rounded-md hover:bg-gray-600 z-10 w-full text-center"
                    >
                        Website
                    </a>
                )
            }
        </div>
    </div>
</div>

<style>
    .card {
        position: relative;
    }

    .card::before {
        content: "";
        position: absolute;
        inset: 0px;
        border-radius: inherit;
        transition: opacity 400ms ease 0s;
        will-change: background, opacity;
        background: radial-gradient(
            800px circle at var(--mouse-x) var(--mouse-y),
            rgba(131, 158, 255, 0.1),
            transparent 40%
        );
        opacity: 0;
        z-index: 2;
        pointer-events: none;
    }

    .card:hover::before {
        opacity: 1;
    }

    .projects-intersect-hidden {
        opacity: 0;
        transform: translateY(-1.5rem);
        transition: all 1.3s ease-in-out;
    }

    .projects-intersect-show {
        opacity: 100%;
        transform: translateY(0);
    }

    .transition-delay-1 {
        transition-delay: 200ms;
    }

    .transition-delay-2 {
        transition-delay: 300ms;
    }
</style>

<script>
    const handleOnMouseMove = (e: any) => {
        const { currentTarget: target } = e;

        if (!target) return;
        const rect = target.getBoundingClientRect(),
            x = e.clientX - rect.left,
            y = e.clientY - rect.top;

        target.style.setProperty("--mouse-x", `${x}px`);
        target.style.setProperty("--mouse-y", `${y}px`);
    };

    for (const card of document.querySelectorAll(".card")) {
        //@ts-ignore
        card.onmousemove = (e) => handleOnMouseMove(e);
    }
</script>
